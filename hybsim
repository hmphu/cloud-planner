#!/usr/bin/env ruby
#


# hybrid cloud - cost simulation


# there are  4 phases of life cycle
# phase 1: fast growing 
# phase 2: fast decreasing 
# phase 3: slow decreasing 
# phase 4: stable 


# length of phase 1 (months)
# if a game traffic goes down,  p0 = 0 

def make_phases(p1_length = 2)
  p1_g = 1.225
  p2_g = 0.691
  p3_g = 0.906
  p4_g = 1.0
  p1_l = 2
  p2_l = 3
  p3_l = 7
  p4_l = 12

  p1_l = p1_length

  phases = [
      [p1_g, p1_l],
      [p2_g, p2_l],
      [p3_g, p3_l],
      [p4_g, p4_l],
    ]
end

def make_traffic(phases)
  traffic = []
  m = 0

  traffic[m] = 100

  phases.each do | growth, length|
    length.times do 
      m = m + 1
      traffic[m] = traffic[m-1] * growth
    end
  end

  return traffic
end

# aws-only cost is simply sum of traffic(m) * aws_price
def aws_only_cost(traffic)
  cost = 0
  traffic.each do |t|
    cost = cost + t
  end
  return cost
end

# idc-only cost is sum of traffic(m) * idc_price + waste_cost  
# assume idc prepared max capacity from the beginning
def idc_only_cost(traffic, idc_cost_ratio, idc_waste_ratio)
  initial_capacity = traffic.max
  cost = 0

  traffic.each do |t|
    cost = cost + t * idc_cost_ratio

    if t < initial_capacity 
      waste_cost = (initial_capacity - t) * idc_cost_ratio * idc_waste_ratio 
      cost = cost + waste_cost
    end
  end
  return cost
end

def cost_bar(aws, idc, waste)
  aws = aws.to_i
  idc = idc.to_i
  waste = waste.to_i

  aws = aws == 0 ? 0 : aws / 2
  idc = idc == 0 ? 0 : idc / 2
  waste = waste == 0 ? 0 : waste / 2

  'i'*idc + 'w' * waste + 'a'*aws
end

# idc_capacity_rate : rate of prepared idc capacity compared to the max traffic 
# show_graph : print visual bar chart
def hybrid_cost(traffic, idc_capacity_rate, idc_cost_ratio, idc_waste_ratio, show_graph)
  puts "\nIDC Rate: #{idc_capacity_rate*100}%" if show_graph

  idc_cost, aws_cost, waste_cost  = 0, 0, 0
  idc_capacity = traffic.max * idc_capacity_rate

  before_peak = true

  traffic.each do |t|
    before_peak = false if t == traffic.max

    t_aws = t > idc_capacity ? t - idc_capacity : 0

    if before_peak
      t_idc = idc_capacity
      t_waste = 0
    else
      t_idc = t < idc_capacity ? t : idc_capacity
      t_waste = t < idc_capacity ? idc_capacity - t : 0
    end

    a = t_aws
    i = t_idc * idc_cost_ratio
    w = t_waste * idc_cost_ratio * idc_waste_ratio

    if show_graph
      puts '*'* (t/2)
      puts cost_bar(a, i, w)
    end

    aws_cost = aws_cost + a 
    idc_cost = idc_cost + i
    waste_cost = waste_cost + w
  end

  return aws_cost, idc_cost, waste_cost
end



# idc_cost_ratio  : idc cost is lower than the cost of aws. idc unit cost / aws unit cost
# idc_waste_ratio : it is not possible to reuse a server as soon as we get an available server 
# pahse1_length   : length of traffic increaing phase after the launcing (months)
def simulate(idc_cost_ratio, idc_waste_ratio, phase1_length, show_graph = false)
  printf "MODEL: IDC-COST( %d%%) IDC-WASTE( %d%%) GROWTH-MONTHS( %d)\n", (idc_cost_ratio*100).to_i, (idc_waste_ratio*100).to_i, phase1_length

  phases = make_phases(phase1_length)
  traffic = make_traffic(phases)

  costs = {}
  (0..200).step(20) do |rate|
    costs["idc_"+rate.to_s] =  hybrid_cost(traffic, rate/100.0, idc_cost_ratio, idc_waste_ratio, show_graph)
  end

  max = 0
  costs.each { |name, costs| max = costs.sum if costs.sum > max }


  printf "%-15s %10s %6s %10s %10s %10s\n", 'IDC-RATIO', 'TOTAL', '(RATE)', 'AWS', 'IDC', 'WASTE'
  costs.each do |name, costs|
    printf "%-15s %10.2f (%3d%%) %10.2f %10.2f %10.2f\n", name, costs.sum, (costs.sum*100/max).to_i, costs[0], costs[1], costs[2]
  end
  puts
end


# IDC unit cost per aws unit cost
idc_cost = 0.33

# waste ratio of available servers in IDC
idc_waste = 0.33


# do simulation for variable 'g'rowth period (months)
(0..3).each { |g| simulate(idc_cost, idc_waste, g, false) }

#simulate(idc_cost, idc_waste, 2, true)
#simulate(idc_cost, idc_waste, 1, false)
#simulate(idc_cost, idc_waste, 0, false)




